{"version":3,"file":"static/js/137.daf10d28.chunk.js","mappings":"yNA0DA,EAnD2B,SAAHA,GAAkD,IAA7CC,EAAMD,EAANC,OAAQC,EAAkBF,EAAlBE,mBAAoBC,EAAUH,EAAVG,WACvDC,GAA8BC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7BI,GAAFF,EAAA,GAAYA,EAAA,IA2B1B,OAEIG,EAAAA,EAAAA,KAACC,EAAAA,GAAa,CACZC,MAAO,CACLC,MAAO,OACPC,MAAO,OACPC,OAAQ,WACRC,MAAO,aAETC,mBAAoB,SAACC,EAAMC,GACzB,OAAOA,EAAQC,aAAaC,OAAO,CACjC,QAAWnB,EACX,WAAc,iBAElB,EACAoB,UAvC4B,SAACC,GAU7BA,EARFC,eAQED,EAPFE,QAOEF,EANFG,UAMEH,EALFI,WAKEJ,EAJFK,OAIEL,EAHFM,WAGEN,EAFFO,WAEEP,EADFQ,MAIFtB,GAAW,GAEXL,IAEID,GACFA,EAAmBoB,EAIvB,EAkBMS,QAAS,SAACC,GACRC,EAAAA,GAAoBD,MAAM,wBAA0BA,EAAME,QAC5D,GAGR,ECEA,MAtDA,SAAyBlC,GAAsC,IAAnCE,EAAkBF,EAAlBE,mBAAoBC,EAAUH,EAAVG,WAC9CC,GAAwCC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAhD+B,EAAY7B,EAAA,GAAE8B,EAAe9B,EAAA,GA8BpC,OA5BA+B,EAAAA,EAAAA,YAAU,WAER,GAAIC,OAAOC,OACTH,GAAgB,OACX,CAEL,IAAMI,EAASC,SAASC,cAAc,UACtCF,EAAOG,IAAG,2CAAAC,OAA8CC,EAAAA,IACxDL,EAAOM,OAAQ,EAEfN,EAAOO,OAAS,WAEdX,GAAgB,EAClB,EAEAK,SAASO,KAAKC,YAAYT,EAC5B,CAEA,OAAO,WACL,CAEJ,GAAG,KAQDU,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACE1C,EAAAA,EAAAA,KAAA,MAAIE,MAAO,CAAEyC,UAAW,UAAWD,SAAC,4BACpC1C,EAAAA,EAAAA,KAAA,QACC0B,GACCe,EAAAA,EAAAA,MAAA,OAAKG,UAAU,sBAAsB1C,MAAO,CAAEyC,UAAW,UAAWD,SAAA,EAClE1C,EAAAA,EAAAA,KAAA,MAAA0C,SAAI,0BACJ1C,EAAAA,EAAAA,KAAA,KAAA0C,SAAG,wBACH1C,EAAAA,EAAAA,KAAC6C,EAAkB,CAACrD,OAAQsD,EAAAA,GAAcrD,mBAAoBA,EAAoBC,WAAYA,OAE9F,KAEHgC,GACCe,EAAAA,EAAAA,MAAA,OAAKG,UAAU,sBAAsB1C,MAAO,CAAEyC,UAAW,UAAWD,SAAA,EAClE1C,EAAAA,EAAAA,KAAA,MAAA0C,SAAI,yBACJ1C,EAAAA,EAAAA,KAAA,KAAA0C,SAAG,wBACH1C,EAAAA,EAAAA,KAAC6C,EAAkB,CAACrD,OAAQuD,EAAAA,GAAatD,mBAAoBA,EAAoBC,WAAYA,OAE7F,OAGV,C","sources":["Pages/SubscriptionOption.js","Pages/SubscriptionList.js"],"sourcesContent":["import React, {useState} from 'react';\nimport { PayPalScriptProvider, PayPalButtons } from '@paypal/react-paypal-js';\nimport { Modal } from \"@mui/material\";\nimport { CLIENT_ID } from \"../utils/Const\";\nimport { NotificationManager } from 'react-notifications';\n//import { useState } from 'react';\n\nconst SubscriptionOption = ({planId, handleSubscription, closeModal}) => {\n  const [success, setSuccess] = useState(false);\n  //const [subscriptionId, setSubscriptionId, setCreatedEmail, setCreatedAmount, setCreatedTime] = useState(null);\n  \n  const handleSubscriptionSuccess = (details) => {\n    const {\n      subscriptionID,\n      payerID,\n      payerName,\n      payerEmail,\n      amount,\n      createTime,\n      updateTime,\n      links,\n    } = details;\n    //handleUserCreation();\n    \n    setSuccess(true);\n\n    closeModal();\n\n    if (handleSubscription) {\n      handleSubscription(details);\n    }\n\n    //closeModal();\n  }\n\n  return (\n\n      <PayPalButtons\n        style={{\n          shape: 'pill',\n          color: 'gold',\n          layout: 'vertical',\n          label: 'subscribe'\n        }}\n        createSubscription={(data, actions) => {\n          return actions.subscription.create({\n            'plan_id': planId, \n            'userAction': \"SUBSCRIBE_NOW\"\n          })\n        }}\n        onApprove={handleSubscriptionSuccess}\n        onError={(error) => {\n          NotificationManager.error('Subscription failed: ' + error.message);\n        }}\n      />\n  );\n};\n\nexport default SubscriptionOption;","import React, { useEffect, useState } from 'react';\nimport SubscriptionOption from './SubscriptionOption';\nimport { CLIENT_ID, ANNUAL_PLAN, MONTHLY_PLAN } from '../utils/Const';\n\nfunction SubscriptionList({ handleSubscription, closeModal }) {\n  const [paypalLoaded, setPaypalLoaded] = useState(false);\n\n  useEffect(() => {\n    // Check if the PayPal script is already loaded\n    if (window.paypal) {\n      setPaypalLoaded(true);\n    } else {\n      // Load the PayPal SDK script dynamically when the component is mounted\n      const script = document.createElement('script');\n      script.src = `https://www.paypal.com/sdk/js?client-id=${CLIENT_ID}`;\n      script.async = true;\n\n      script.onload = () => {\n        // PayPal SDK is loaded, set the flag to true\n        setPaypalLoaded(true);\n      };\n\n      document.body.appendChild(script);\n    }\n\n    return () => {\n      // No need to remove the script, as it will be reused if the component is remounted\n    };\n  }, []);\n\n  const handleSubscriptionSuccess = (details) => {\n    // Subscription is successful\n    handleSubscription(details);\n  };\n\n  return (\n    <div>\n      <h2 style={{ textAlign: 'center' }}>Choose a Subscription:</h2>\n      <p></p>\n      {paypalLoaded ? (\n        <div className=\"subscription-option\" style={{ textAlign: 'center' }}>\n          <h3>Monthly Subscription</h3>\n          <p>$225 USD per month</p>\n          <SubscriptionOption planId={MONTHLY_PLAN} handleSubscription={handleSubscription} closeModal={closeModal} />\n        </div>\n      ) : null}\n\n      {paypalLoaded ? (\n        <div className=\"subscription-option\" style={{ textAlign: 'center' }}>\n          <h3>Annual Subscription</h3>\n          <p>$2600 USD per year</p>\n          <SubscriptionOption planId={ANNUAL_PLAN} handleSubscription={handleSubscription} closeModal={closeModal}/>\n        </div>\n      ) : null}\n    </div>\n  );\n}\n\nexport default SubscriptionList;\n"],"names":["_ref","planId","handleSubscription","closeModal","_useState","useState","_useState2","_slicedToArray","setSuccess","_jsx","PayPalButtons","style","shape","color","layout","label","createSubscription","data","actions","subscription","create","onApprove","details","subscriptionID","payerID","payerName","payerEmail","amount","createTime","updateTime","links","onError","error","NotificationManager","message","paypalLoaded","setPaypalLoaded","useEffect","window","paypal","script","document","createElement","src","concat","CLIENT_ID","async","onload","body","appendChild","_jsxs","children","textAlign","className","SubscriptionOption","MONTHLY_PLAN","ANNUAL_PLAN"],"sourceRoot":""}